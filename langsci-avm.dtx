% \iffalse meta-comment
% !TeX program = xelatex
% !TeX encoding = utf-8
%<*internal>
\begingroup
%</internal>
%<*install>
\input{l3docstrip.tex}
\keepsilent
\askforoverwritefalse
\preamble
------------------------------------------------------------------------------

langsci-avm is aimed at typesetting beautiful feature structures, 
also known as attribute-value matrices (AVMs), for use in linguistics.

The package provides a minimal and easy to read syntax. 
It depends only on the array package and can be placed almost everywhere, 
in particular in footnotes or graphs and tree structures. The package is meant
as an update to, and serves the same purpose as, Christopher Manning’s 
avm package, but shares no code base with that package.

langsci-avm was developed at Language Science Press to help in the
production of scientific texts in linguistics.

Copyright (C) 2021 by Felix Kopecky, Language Science Press

This work consists of the file langsci-avm.dtx 
          and the derived file langsci-avm.pdf.
                                
It may be distributed and/or modified under the conditions of the
LaTeX Project Public License (LPPL), either version 1.3c of this
license or (at your option) any later version. The latest version
of this license is at <http://www.latex-project.org/lppl.txt>.

This work is ``maintained'' (per LPPL maintenance status) by
Felix Kopecky <felix.kopecky@langsci-press.org>.

The development version can be found at

   https://github.com/langsci/langsci-avm

for those people who are interested. Pull requests are welcome.

Please report any bugs or feature requests to 

   https://github.com/langsci/langsci-avm/issues

------------------------------------------------------------------------------
\endpreamble
\declarepreamble\minimalpreamble
\endpreamble
\postamble
\endpostamble
\usedir{tex/latex/langsci-avm}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usepreamble\minimalpreamble
\usepostamble\defaultpostamble
\usedir{source/latex/langsci-avm}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\endgroup
%</internal>
%<*driver>
\documentclass{l3doc}
\usepackage[linguistics]{forest}
\usepackage[lfg,tikz]{langsci-avm}
\usetikzlibrary{arrows, arrows.meta}
\usepackage{enumitem,url,gb4e}
\setlist[description]{font=\normalfont}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
% \title{\pkg{langsci-avm}}
% \author{Felix Kopecky\thanks{\protect\url{mailto:felix.kopecky@langsci-press.org}. 
% 		Please submit bug reports and feature requests to
% 		\protect\url{https://github.com/langsci/langsci-avm/issues}.
% 	}}
% \date{Version 0.3.0-rc8 -- \today}
% \maketitle
% \frenchspacing
% \begin{documentation}
% \section{Introduction}
% \pkg{langsci-avm} is a \LaTeX3 package aimed at typesetting beautiful feature structures, also known as \emph{attribute-value matrices}, for use in linguistics. The package provides a minimal and easy to read syntax. It depends only on the \pkg{array} package and can be placed almost everywhere, in particular in footnotes or graphs and tree structures. The package is meant as an update to, and serves the same purpose as, Christopher Manning's \pkg{avm} package, but shares no code base with that package. When you come from \pkg{avm}, please see Section~\ref{sec:switching} for a quick conversion guide.
%
% To start using \pkg{langsci-avm}, place |\usepackage{langsci-avm}| in your preamble.\\\\
% \emph{This document is structured as follows:} Section~\ref{sec:basiccommands} describes the input syntax for AVMs and their parts. Ways to customise your AVM's layout follow in Section~\ref{sec:options}, and selected usage cases are presented in Section~\ref{sec:applications}. There's also an administrative and \TeX nical appendix at the end of this document, in case you are interested.
% 
% \subsection{Example}
% \begin{verbatim}
% \avm{
%   [ ctxt & [ max-qud \\
%              sal-utt & \{ [ cat \\ 
%                             cont <ind & i> ] \}
%            ]
%   ]
% }
% \end{verbatim}
% {\centering\avm{
%     [ ctxt & [max-qud \\
%                 sal-utt & \{ [  cat\\ cont <ind & i> ]  \}\\
%                 ]
%     ]
% }\medskip\\}
% \subsection{Acknowledgements}
% Thanks to Phelype Oleinik for help on recursion and expansion with \LaTeX3. Thanks to Ahmet Bilal Özdemir and Stefan Müller for their contributions in planning and testing this package.
% 
% \section{Structuring AVMs}
% \label{sec:basiccommands}
% 
% \begin{function}{\avm}
%   \begin{syntax}
%     \cs{avm} \oarg{options} \marg{structure}
%   \end{syntax}
%   The heart of this package and its root document comand is |\avm|. In the scope of the command, delimiter characters are processed to open and close (sub-)structures, as described in Section~\ref{sec:commands}. Special elements are described in Section~\ref{sec:specialcommands}. For a description of the layout \meta{options}, see Section~\ref{sec:options}.
% 
%   A \meta{structure} is basically the content of a stylised \cmd{tabular}: The columns are separated by \cmd{&} and a new line is entered with \cmd{\\}.
% \end{function}
%  
% \subsection{Entering (sub-)structures within \texttt{\textbackslash avm}}
% \label{sec:commands}
% 
% \begin{function}[updated=2020-10-02]{[...],<...>,(...),\{...\},\[...\]}
% \begin{syntax}
%     \cmd{[} \meta{structure} \cmd{]}
%     \cmd{<} \meta{structure} \cmd{>}
%     \cmd{(} \meta{structure} \cmd{)}
%     \cmd{\{} \meta{structure} \cmd{\}}
%     \cmd{\[} \meta{structure} \cmd{\]}
%   \end{syntax}
%   Within the scope of \cs{avm}, these delimiters create (sub-)structures that are enclosed by the respective delimiter.  Due to the special meaning that curly braces have in \LaTeX, these are the only ones that need to be run with an escape token (|\|). It is currently possible to mix delimiters, e.g. with |<|\meta{structure}|)|, but this may change in future versions.
%   
%   \pkg{langsci-avm} expects your (sub-)structures to have \emph{at most two columns}, so that for every line in each (sub-)structure, there should be no more than one \cmd{&}. It is recommended to have at least some lines with a \cmd{&} in your \meta{structure}. Currently, display issues may appear in some structures if none are given.\bigskip\\
%   \noindent\begin{minipage}[c]{.5\linewidth}
% \begin{verbatim}
% \avm{
%   \[ [ < ( \{ ... \} ) > ] \]
% }
% \end{verbatim}
% \end{minipage}\begin{minipage}[c]{.5\linewidth}
% \avm{
%   \[ [ < ( \{ ... \} ) > ] \]
% }
% \end{minipage}\bigskip\\
% \noindent\begin{minipage}[c]{.5\linewidth}
% \begin{verbatim}
% \avm{
%   \[ [ \{ ... \} \\
%   < ( ... ), ( ... ) > ] \]
% }
% \end{verbatim}
% \end{minipage}\begin{minipage}[c]{.5\linewidth}
% \avm{
%   \[ [ \{ ... \} \\
%   < ( ... ), ( ... ) > ] \]
% }
% \end{minipage}\bigskip\\
% \emph{Warning:} The semantic bracket \avm{\[...\]} is only available when the package option |[lfg]| is loaded, i.e. |\usepackage[lfg]{langsci-avm}|. This is because the semantic delimiters are not available in every font, and are currently not provided in standard \LaTeX\ documents. If you load the |[lfg]| option but do not provide the symbol (e.g. by using a font such as \pkg{libertinus}), the package \pkg{unicode-math} will automatically be loaded to provide the symbol. If the |[lfg]| option is not present, \cmd{\[} \marg{structure} \cmd{\]} will result in none delimiter output, but the \marg{structure} will be printed nonetheless.
% \end{function}
% 
% \begin{function}[added=2021-03-03]{\lframe ... \rframe}
% \begin{syntax}
%     \cmd{\lframe} \meta{structure} \cmd{\rframe}
%   \end{syntax}
% In addition to the delimiters above, these two delimit a \meta{structure} that is placed in a rectangular box, which is used in Fillmore \& Kay's notation. It can be used like the other delimiters.\bigskip\\
% \noindent\begin{minipage}[c]{.5\linewidth}
% \begin{verbatim}
% \avm{
%   \lframe ... \rframe
% }
% \end{verbatim}
% \end{minipage}\begin{minipage}[c]{.5\linewidth}
% \avm{
%   \lframe ... \rframe
% }
% \end{minipage}
% 
% The parameters of the frame can be adjusted with these options:
% \begin{description}[style=nextline]
%   \item[|framewidth =| \meta{length} \hfill (initially |1pt|)] Width of the frame.
%   \item[|framesep =| \meta{length} \hfill (initially |3pt|)] Separation of the frame and its contents.
% \end{description}
% 
% \end{function}
% 
% \begin{function}{!...!}
% \begin{syntax}
%     \cmd{!} \meta{text} \cmd{!}
%   \end{syntax}
%   Escapes the |avm| mode so that all delimiters can be used as usual characters. If you need |!| as a regular character, see Section~\ref{sec:options} for how to change the |switch|.
% \end{function}
% 
% \subsection{Commands for tags, types, unusal lines, and relations}\label{sec:specialcommands}
% \begin{function}[updated=2020-04-29]{\tag,\0,\1,...,\9}
%   \begin{syntax}
%    \cs{tag} \marg{identifier}
%    \cmd{\0, \1, \2, \3, \4, \5, \6, \7, \8, \9}
%   \end{syntax}
%   \cs{tag} puts its \marg{identifier} in a box, more precisely an \cs{fbox}. Within the box, the |tags| font is applied. \cs{0}, \cs{1}, ..., \cs{9} are shortcuts to \cs{tag} and place the respective number in the box. For example, \cs{4} is equivalent to |\tag{4}|. The shortcuts do not take any arguments.
%   
% If you want to use this command outside an AVM, you can obtain, for example, \avm{\4}, by using |\avm{\4}|, or the equivalent  |{\fboxsep.25ex\fbox{\footnotesize 4}}|.\bigskip\\   
% \noindent\begin{minipage}{.6\linewidth}
% \begin{verbatim}
% \avm{[ attr1 & \4\\
%        attr2 & \4[attr3 & val3\\
%                   attr4 & val4] ]}
%  \end{verbatim}
%  \end{minipage}\begin{minipage}{.4\linewidth}
%  \avm{[ attr1 & \4\\
% 	attr2 & \4[attr3 & val3\\
% 	attr4 & val4] ]}
%   \end{minipage}
% \end{function}
% 
% \begin{function}[updated=2020-03-30]{\type,\type*} 
%   \begin{syntax}
%     \cs{type}\meta{*} \marg{type}
%   \end{syntax}
%   Will output the \meta{type} in the |types| font (roman italics by default). The starred variant \cs{type*} will span the complete (sub-)structure and \emph{can only be placed in the first column} of this structure. After the starred \cs{type*}, a |\\| is recommended, but can usually be omitted.\bigskip\\   
%   \noindent\begin{minipage}{.6\linewidth}
% \begin{verbatim}
% \avm{[ \type*{A type spanning a line}
%        attr & [\type{type}] ]}
% \end{verbatim}
%   \end{minipage}\begin{minipage}{.4\linewidth}
%   	\avm{[
%   		\type*{A type spanning a line}
%   		attr & [\type{type}]
%   		]}
%   \end{minipage}
% \end{function}
% 
% \begin{function}[added=2020-10-02,updated=2020-12-11]{\id} 
%   \begin{syntax}
%     \cs{id} \marg{id} \marg{structure}
%   \end{syntax}
%   A variant of \cs{substack} from \pkg{amsmath}, this command adds an identifier to the \marg{structure}. The contents of \marg{id} will be set in math mode by default, which is convenient given that they often contain variables with subscript indices.  Multiple IDs should be separated by a new line, |\\|. The alignment of the id column can be changed with the key \cmd{id align}, see Section~\ref{sec:options}.\bigskip\\   
%   \noindent\begin{minipage}{.75\linewidth}
% \begin{verbatim}
% \avm{ \id{n_1\\n_2}{[subj\\pred&swim]}}
% \end{verbatim}
%   \end{minipage}\begin{minipage}{.25\linewidth}
% \avm{ \id{n_1\\n_2}{[subj\\pred&swim]}}
%   \end{minipage}
% \end{function}
% 
% \begin{function}[updated=2021-06-08]{\punk}
% \begin{syntax}
%   \cs{punk} \marg{attribute}\marg{type}
% \end{syntax}
% Some \meta{attributes} think that the layout of the other attributes in their community leaves no space for them to express their individuality. They desire a life outside the confines of the alignment defined by the others, while still remaining a member of the matrix.
%    
% Technically, this is a line with no snapping to the column layout, but with spacing between the \meta{attribute} and \meta{type}. After \cs{punk}, a |\\| is obligatory if not in the last line.\bigskip\\   
% \noindent\begin{minipage}{.6\linewidth}
% \begin{verbatim}
% \avm{[ attr1 & val1\\
%       \punk{a quite long attr2}{val2}
%        attr3 & val3\\
%        attr4 & val4
%      ]}
% \end{verbatim}
% \end{minipage}\begin{minipage}{.4\linewidth}
%    \avm{[
%    	attr1 & val1\\
%    	\punk{a quite long attr2}{val2}
%       attr3 & val3\\
%       attr4 & val4
%    	]}
%    \end{minipage}\bigskip\\
% \emph{Hint:} Also have a look at the option |align=false|.
% \end{function}
% 
% \begin{function}[updated=2020-03-16]{\+}
%   In the scope of \cs{avm}, \cs{+} comes out as ``$\oplus$''. ``+'' can be obtained normally. \textit{In the earlier Version 0.1.0-beta, \cmd{+} produced ``$\oplus$''.}
% \end{function}
% 
% \begin{function}[added=2020-03-17]{\-}
%   In the scope of \cs{avm}, \cs{-} comes out as ``$\ominus$''. To use the ``optional hyphenation'' meaning of \cs{-}, please write |!\-!|.
% \end{function}
% 
% \begin{function}[added=2020-03-17]{\shuffle}
%   In the scope of \cs{avm}, \cs{shuffle} is a shortcut for ``$\bigcirc$'' to mark the shuffle relation.
% \end{function}
% 
% \section{AVM layout}\label{sec:options}
% 
% \subsection{Defining styles}
% 
% You can customise many aspects of how an AVM is printed, including the fonts or spacing between delimiters and content. You can apply them locally via the \oarg{options} of \cs{avm} or by using \cs{avmsetup}. And you can also define your own styles and use them via the \oarg{style = } option in \cs{avm}. 
% 
% \begin{function}{\avmsetup}
%   \begin{syntax}
%     \cs{avmsetup} \marg{options}
%   \end{syntax}
%   \marg{options} is a comma-separated list of |key = value| settings. See the list below for all user-configurable options. The \marg{options} are the same as in \cs{avm}\oarg{options}. When inserted in \cs{avm}\oarg{options}, they apply locally, and globally if given to \cs{avmsetup}. Local settings always override global ones, and you can have any feasible number of \cs{avmsetup}s in your document.
% 
% \end{function}
% 
% \begin{function}[added=2020-05-11]{\avmdefinestyle}
%   \begin{syntax}
%     \cs{avmdefinestyle} \marg{name} \marg{settings}
%   \end{syntax}
% Instead of applying settings globally or per AVM, you can also define styles and assign them to AVMs, as in |\avm[style=|\meta{name}|]{...}|. The \meta{settings} are a comma-separated list of |key = value| settings, and should be a subset of the settings from \cs{avmsetup}. For example, the following |plain| style highlights neither attributes, values, nor types:
% 
% \begin{verbatim}
% \avmdefinestyle{plain}{attributes=\normalfont,
%                        values=\normalfont,
%                        types=\normalfont}
% \end{verbatim}
% The style is applied with |\avm[style=plain]{...}|.
% \end{function}
% 
% \bigskip
% 
% \noindent Now to the list of settings you can actually apply:
% 
%   \begin{description}[style=nextline]
%   \item[|style =| \meta{name} \hfill (initially empty)] In addition to any style that you possibly define yourself, a style |narrow| is pre-defined in the package (see Section~\ref{sec:spacing}).
% 
%   \item[|align =| \meta{choice} \hfill (initially |true|)] Controls whether the columns in the AVM and its substructures should be aligned (snapping to the grid) or not. Aligned AVMs are separated by |columnsep|, non-aligned are separated by |vectorsep|.
% 
%   \item[|stretch =| \meta{factor} \hfill (initially |0.9|)] Define \cs{arraystretch}, i.e. a factor in the determination of line height.
%   
%   \item[|columnsep =| \meta{length} \hfill (initially |0.5ex|)] Define the \cs{tabcolsep}, i.e. horizontal space between columns. The first and second column will have |0\columnsep| to the left and right, respectively. Between the two the distance is |2\columnsep|. Using relative units (like |ex| or |em|) may be a good idea so that |columnsep| scales well with changes in font size.
% 
%   \item[|vectorsep =| \meta{length} \hfill (initially |1em|)] Define the horizontal separation between columns in non-aligned matrices (see option |align|).
%   
%   \item[|delimfactor =| \meta{factor} \hfill (initially |1000|)] Sets \cs{delimiterfactor}. The calculation for the minimum height of a delimiter is $y \cdot f /1000$, where $y$ is the height of the content and $f$ the value of  \cmd{delimfactor}. The default |1000| ensure that the delimiters' height is at least that of the structure.
%   
%   \item[|delimfall =| \meta{length} \hfill (initially |0pt|)] Controls \cs{delimitershortfall}, i.e. the maximum height that the delimiters can be shorter than the enclosed structure. The default |0pt| ensure that the delimiters are not shorter than the contents.
%   
%   \item[|extraskip| = \meta{length} \hfill (initially \cs{smallskipamount})] If a substructure is immediately followed by a \cmd{\\}, an extra amount of vertical skip is added so that the content of the next line, possibly another delimiter, does not clash with the delimiter in that line. This automatic skip insertion can be circumvented with placing a \cs{relax} before the linebreak, i.e. |\relax\\|.
%   
%   \item[|attributes =| \meta{font settings} \hfill (initially |\textbackslash scshape|)] The font for attributes, i.e. the first column of each structure.
%   
%   \item[|values =| \meta{font settings} \hfill (initially |\textbackslash itshape|)] The font for values, i.e. the second column of each structure.
%   
%   \item[|types =| \meta{font settings} \hfill (initially |\textbackslash itshape|)] The font used in \cs{type} and \cs{type*}.
%   \item[|tags =| \meta{format settings} \hfill (initially |\textbackslash footnotesize|)] The font (size) used in \cs{tag} and the shortcuts \cs{1}...\cs{9}.
%   \item[|switch =| \meta{token} \hfill (initially |!|)] Define the escape token. Change this if you need to use ``!'' as a text glyph.
%   \item[|id align =| \meta{token} \hfill (initially |l|)] Change the alignment of the column inserted by \cs{id}. Has to be a column specification. The most probable choices are \cmd{l} and \cmd{r}.
%   \item[|id position =| \meta{option} \hfill (initially |south-west|)] Change the position of \cs{id}. In the standard setting |south-west|, the \cs{id} is placed in the lower left corner of the enclosed structure. When set to |south-east|, the contents are set to the lower right corner. Currently, only |south-west| and |south-east| are recognised inputs, and an error is raised when an unknown option is input.
%   \item[|customise = | \meta{settings} \hfill (initially empty)] An interface to input custom commands to be run at the beginning of every \cs{avm}.
%   \end{description}
% 
% \subsection{Drawing edges between AVM contents}
% It is possible to make AVM contents available to \pkg{tikz}, so that they can be referenced in a \cmd{tikzpicture}. To enable this feature, \pkg{langsci-avm} has to be loaded with the option |[tikz]|:
% 
% \begin{verbatim}
% \usepackage[tikz]{langsci-avm}
% \end{verbatim}
% Additionaly, \cmd{avm} environments on which \pkg{tikz} is to be used need to have the |[pic]| option present:
% 
% \begin{verbatim}
% \avm[pic] {...}
% \end{verbatim}
% 
% Only the parts of an AVM that are specifically marked will be known to \pkg{tikz}. To mark a part of an AVM to be used by Ti\emph{k}Z, use \cs{node}:
% 
% \begin{function}[added=2020-09-23]{\node}
%   \begin{syntax}
%     \cs{node} \marg{id} \marg{contents}
%   \end{syntax}
%   \marg{id} serves as part of the node's identifier in a \cmd{tikzpicture}. It will be prefixed, and it's complete name will be |avm-n-\marg{id}|, where |n| is the counter of \cs{avm} in your document that have the |[pic]| option enabled and that don't have a |picname| (see below). |n| starts at 1. For example, a \cs{node} named ``pretty-node'' in the fourth |[pic]|-enabled \cmd{avm} in your document will be |avm-4-pretty-node|. Note that \cs{node} will register the complete name globally in your document, and so can't be declared by other \pkg{tikz} nodes.
% 
% This behaviour can be adjusted by passing a |[picname = |\meta{avm's name}|]| to \cs{avm}. E.g., \cs{node}s within |\avm[pic, picname = example1]| will have a full name pattern of |example1-|\meta{id}. Named \cs{avm}s do \emph{not} raise the |n| mentioned in the last paragraph.
% 
% Any proper part of an AVM can be referenced in \marg{contents}. It could be just a value, an attribute's name, or part of either, but whole (sub-)structures can be part of \marg{contents} as well.
% \end{function}
% 
% A \cmd{tikzpicture} with options |[remember picture, overlay]| enabled can reference \pkg{langsci-avm}'s \cs{node}s. This way, Ti\emph{k}Z' extensive drawing abilities are available for the decoration of AVMs. Here's a very simple example document:
% 
% \begin{center}
% \avm[pic, picname=example1]{[ subj  & \1\\
% 	comps &  <\node{gap}{gap-ss}> \bigskip\\
% 	\node{phon}{phon} &   <\1 \+ \2>
% 	]}
% 
% \begin{tikzpicture}[remember picture,overlay]
% 	\path[{Stealth[]}-{Stealth[]},gray,dashed,in=90,out=270] 
% 	(example1-gap.south) edge (example1-phon.north);
% \end{tikzpicture}
% \end{center}
% 
% \begin{verbatim}
% \documentclass{article}
% \usepackage[tikz]{langsci-avm}
% \usepackage{tikz} % optional, since langsci-avm will load tikz if option 
%                   % tikz is present
% \usetikzlibrary{arrows,arrows.meta}
% 
% \avm[pic]{[ subj  & \1\\
% 	comps &  <\node{gap}{gap-ss}> \bigskip\\
% 	\node{phon}{phon} &   <\1 \+ \2>
% 	]}
% 
% \begin{tikzpicture}[remember picture,overlay]
% 	\path[{Stealth[]}-{Stealth[]},gray,dashed,in=90,out=270] 
% 	(avm-1-gap.south) edge (avm-1-phon.north);
% \end{tikzpicture} 
% \end{verbatim}
% 
% \subsection{Defining input patterns}
% 
% \begin{function}[added=2020-06-29]{\avmdefinecommand}
%   \begin{syntax}
%     \cs{avmdefinecommand} \marg{name} \oarg{label} \marg{settings}
%   \end{syntax}
% Sub-structures often come in patterns. For example, AVMs often have a \textsc{phon} attribute, which is mapped to a list, the entries of which are in italics. \cs{avmdefinecommand} can account  for this and other input patterns. For example,
% 
% \begin{verbatim}
% \avmdefinecommand{custom}{...}
% \end{verbatim}
% will create a command \cs{custom} available only in the scope of \cs{avm} (this means that you can have a different meaning in the rest of your document). The \meta{settings} will then be applied to the scope in which \cs{custom} is called. If an optional \meta{label} is given, the label will be printed, in the current font, before the \meta{settings} are applied.
% 
% \cs{custom} generated in this way automatically advances to the value column after the \meta{label} is printed. This means that commands generated with \cs{avmdefinecommand} should be called in the attribute column of an existing structure. This behaviour can be circumvented with the starred variant \cs{name*}, which is automatically generated by \cs{avmdefinecommand} as well. However, it seems advisable to use the starred variants sparingly. 
% 
% Here's an example for the aforementioned \text{phon} pattern:
% 
% \begin{verbatim}
% \avmdefinecommand{phon}[phon]
%   {
%     attributes  = \itshape,
%     delimfactor = 900,
%     delimfall   = 10pt
%   }
% \end{verbatim}
% 
% This creates a command \cs{phon} (and the variant \cs{phon*}) within the scope of any \cs{avm}. It will print the label \texttt{phon} in the current font and then apply three settings locally: italics for the attribute (first) column, and two settings for very narrow delimiter fitting. 
% 
% This results in: (The font of this documentation has little support for IPA.)\avmdefinecommand{phon}[phon] {attributes  = \itshape,delimfactor = 900, delimfall   = 10pt}\bigskip\\
% \noindent\begin{minipage}[c]{.5\linewidth}
% \begin{verbatim}
% \avm{
%   [\type*{word}
%    \phon <lin'gwistiks>\\
%    synsem & [ ... ]
%   ]
% }
% \end{verbatim}
% \end{minipage}\begin{minipage}[c]{.5\linewidth}
% \avm{
%   [\type*{word}
%    \phon <lin'gwistiks>\\
%    synsem & [ ... ]
%   ]
% }
% \end{minipage}\bigskip
% 
% Note that any other structure type would have worked instead of \avm{<>}. But \avm{<>} and any other markers for sub-structures are left unchanged by \cs{phon} and other custom commands. This is why the \emph{attribute} font is changed by \cs{phon}, although \emph{lin'gwistiks} is technically a value. Remember that \cmd{<} creates a new list sub-substructure, and the first content is printed in its attribute font.
% \end{function}
% 
% \newpage\section{Applications}\label{sec:applications}
% 
% \subsection{Spacing and size of delimiters}\label{sec:spacing}
% \pkg{langsci-avm} automatically detects if the end of a sub-structure is followed by a line break. This is useful to find cases in which two sub-structures are printed immediately below each other, and to add extra spacing (the |extraskip| from the options). This automatic detection can be suppressed with \cs{relax}. See below for the effect of that detection:\bigskip\\
% \noindent\begin{minipage}[c]{.5\textwidth}\centering
% \begin{verbatim}
% \avm{[ [attr1 & val1 \\ 
%         attr2 & val2 ] \\
%        [attr1 & val1 \\ 
%         attr2 & val2 ]
%      ]}
% \end{verbatim}
% 
% \avm{[ [attr1 & val1 \\ 
%         attr2 & val2 ] \\
%        [attr1 & val1 \\ 
%         attr2 & val2 ]
%      ]}
% \end{minipage}\begin{minipage}[c]{.5\textwidth}\centering
% \begin{verbatim}
% \avm{[ [attr1 & val1 \\ 
%         attr2 & val2 ] \relax\\
%        [attr1 & val1 \\ 
%         attr2 & val2 ]
%      ]}
% \end{verbatim}
% 
% \avm{[ [attr1 & val1 \\ 
%         attr2 & val2 ] \relax\\
%        [attr1 & val1 \\ 
%         attr2 & val2 ]
%      ]}
% \end{minipage}\medskip
% 
% If many delimiters are nested, this occasionally results in larger delimiter sizes. There is a pre-defined |narrow| style that resets |delimfall| (to |5pt|) and |delimfactor| (to |997|), which are  the values recommended in the \textit{\TeX book}. This results in a more compact appearance:\bigskip\\ 
% \noindent\begin{minipage}[t]{.5\textwidth}\centering
% \begin{verbatim}
% \avm{[ attr \{<\1>\}]}
% \end{verbatim}
% 
% \avm{[ attr <\{\1\}>]}
% \end{minipage}\begin{minipage}[t]{.5\textwidth}\centering
% \begin{verbatim}
% \avm[style=narrow]{[ attr \{<\1>\}]}
% \end{verbatim}
% 
% \avm[style=narrow]{[ attr <\{\1\}>]}
% \end{minipage}  
% 
% \subsection{Disjunctions and other relations}
% Sometimes AMVs are placed beside other content to express disjunctions or other relations. In \pkg{langsci-avm} this is done naturally:\bigskip\\
% \noindent\begin{minipage}[c]{.5\textwidth}
% \begin{verbatim}
% \avm{ [attr1 & val1\\
%        attr2 & val2\\
%        attr3 & val3] } $\lor$ 
% \avm{ [attr1' & val1'\\
%        attr2' & val2'\\
%        attr3' & val3'\\] }
% \end{verbatim}
% \end{minipage}\begin{minipage}[c]{.5\textwidth}
%  \avm{ [attr1 & val1\\
%          attr2 & val2\\
%          attr3 & val3] } $\lor$ 
%  \avm{ [attr1' & val1'\\
%         attr2' & val2'\\
%         attr3' & val3'\\] }
% \end{minipage}\bigskip\\
% \noindent\begin{minipage}[c]{.5\textwidth}
% \begin{verbatim}
% \textit{sign} $\to$ 
% \avm{ [ attribute1 & value1\\
%         attribute2 & value2\\
%         attribute3 & value3 ] }
% \end{verbatim}
% \end{minipage}\begin{minipage}[c]{.5\textwidth}
%   \textit{sign} $\to$ 
% \avm{ [ attribute1 & value1\\
% 	attribute2 & value2\\
% 	attribute3 & value3 ] }
% \end{minipage}
% 
% \pagebreak\subsection{Use as a vector}
% It's possible to use \pkg{langsci-avm} for feature vectors rather than matrices, as may be useful in generative grammar.\medskip\\
% \noindent\begin{minipage}[c]{.8\textwidth}
% \begin{verbatim}
% \avm[attributes=\normalfont]{[v1\\v2\\v3]}$\varphi$
% \end{verbatim}
% \end{minipage}\begin{minipage}[c]{.2\textwidth}
% \avm[attributes=\normalfont]{[v1\\v2\\v3]}$\varphi$
% \end{minipage}
% 
% \subsection{Combinations with \pkg{gb4e}, \pkg{expex}, and \pkg{linguex}}
% 
% This package works fine with \pkg{gb4e} and its fork \pkg{langsci-gb4e}. To align the example number at the top of your structure, please use \cs{attop} from \pkg{gb4e}:\bigskip\\
% \noindent\begin{minipage}[c]{.5\textwidth}
% \begin{verbatim}
% \begin{exe}
%     \ex\attop{
%     \avm{[ attr1 & val1\\
%            attr2 & val2\\
%            attr3 & val3]}
%     }
%   \end{exe}
% \end{verbatim}
% \end{minipage}\begin{minipage}[c]{.5\textwidth}
%   \begin{exe}
% 	\ex\attop{
% 		\avm{[ attr1 & val1\\
% 			attr2 & val2\\
% 			attr3 & val3]}
% 	}
% \end{exe}
% \end{minipage}\bigskip\\
% 
% \noindent The same can be achieved with \pkg{expex} using \cs{envup} from \pkg{lingmacros} (see below) or using this \emph{experimental} syntax:
% 
% \begin{verbatim}
% \ex \vtop{\strut\vskip-\baselineskip{
%   \avm{[ attr1 & val1\\
%          attr2 & val2\\
%          attr3 & val3]} 
% }}
% \xe
% \end{verbatim}
% 
% \noindent Examples typed with \pkg{linguex} can be combined with \cs{evnup} from \pkg{lingmacros} to align AVMs (many thanks to Jamie Findlay for pointing this out):
% 
% \begin{verbatim}
% \ex. \envup{\avm{[ attr1 & val1\\
%          attr2 & val2\\
%          attr3 & val3]} 
%       }
% \end{verbatim}
% 
% \subsection{Combinations with \pkg{forest}}
% This package also works fine with \pkg{forest}. As per the \pkg{forest} documentation, it is recommended to protect any \cs{avm}-statements with |{}| in nodes:\bigskip\\
% \noindent\begin{minipage}[c]{.6\textwidth}
% \begin{verbatim}
% \begin{forest}
%  [A [B] [{\avm{[attr1 & val1\\
%                 attr2 & val2\\
%                 attr3 & val3]}} ] ]
% \end{forest}
% \end{verbatim}
% \end{minipage}\begin{minipage}[c]{.4\textwidth}
% \begin{forest}
% 	[A [B] [{\avm{[attr1 & val1\\
% 			attr2 & val2\\
% 			attr3 & val3]}} ] ]
% \end{forest}
% \end{minipage}\newpage
% 
% It may happen that extensive AVMs protrude into the space reserved for other \pkg{forest} nodes or edges. In this case, the \pkg{forest} setting \cmd{for children = \{anchor=north\}} may be useful: (If you like, try this tree without that setting.)\bigskip\\
% \noindent\begin{minipage}[c]{.6\textwidth}
% \begin{verbatim}
% \begin{forest}
%   [A, for children = {anchor=north}
%      [B] [{\avm{[attr1 & val1\\
%      attr2 & a long value val2\\
%      attr3 & val3\\
%      attr4 & val4\\
%      attr5 & val5]}} ] 
%   ]
% \end{forest}
% \end{verbatim}
% \end{minipage}\begin{minipage}[c]{.4\textwidth}
% \begin{forest}
% 	[A, for children = {anchor=north} [B] [{\avm{[attr1 & val1\\
% 			attr2 & a long value val2\\
%           attr3 & val3\\
%           attr4 & val4\\
% 			attr5 & val5]}} ] ]
% \end{forest}
% \end{minipage}
% 
% \subsection{Switching from Christopher Manning's \pkg{avm} package}\label{sec:switching}
% Switching from \pkg{avm} to \pkg{langsci-avm} will require some, though hopefully minimal, changes to the code. In particular, \pkg{langsci-avm} doesn't distinguish between ``active'' and ``passive'' modes, there is now a single way of sorting (see \cs{type}, which replaces \cs{asort} and \cs{osort}), and tags are now produced without |@| (\cs{4} instead of \cmd{@4}, etc.). 
% 
% Paths can be printed with a normal \cmd{|}, and $\oplus$ and other relation symbols can be input more easily (see Section~\ref{sec:commands}), though the package will also work with \verb+$|$+ and \verb+$\oplus$+. 
% 
% \pkg{langsci-avm} is not yet able to draw lines in elements of AVMs. This feature is planned for Version 0.3.
% 
% 
% \subsection{Spanning both columns}
% You can use the \pkg{multicol} package to span both columns in a (sub-)structure. Please remember that every structure has two columns, so the only sensible usage is 
% 
% \begin{verbatim}
% \multicolumn{2}{l}{...}
% \end{verbatim}
% 
% \noindent but only in the first column of a (sub-)structure. For a special usage case, see \cs{type} and \cs{type*} (which do not depend on \pkg{multicol}).
% 
% \section{Caveats and planned features}\label{sec:caveats}
% \begin{enumerate}
% \item There are currently no error messages. If you do not receive the intended output, please make sure that your code fits the syntax described in this documentation. If your code is fine but the output is not, please submit a bug report or feature request at \url{https://github.com/langsci/langsci-avm/issues}.
% \item[] These features are planned for the future:
% \item A check whether the delimiters are balanced, i.e. whether all (sub-)structures are closed by a \verb+]+, \verb+}+, etc.
% \item Introduce the ability to draw (curved) lines between structures and elements.
% \item Improve the appearance of (very) large angle brackets so that they vertically span the complete structure they enclose, maybe using \pkg{scalerel}.
% \end{enumerate}
% 
% \section{Feedback and bug reports}
% Comments, usage reports, and feature requests are welcome! Please open an issue for any of these at \url{https://github.com/langsci/langsci-avm/issues}, or write to me at \url{mailto:felix.kopecky@langsci-press.org} if you feel the need for a feature not listed here, big or small.
% \end{documentation}
% 
% \begin{implementation}
% 
% \section{Implementation}
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%    \begin{macrocode}
%<@@=avm>
%    \end{macrocode}
%    \begin{macrocode}
\RequirePackage{xparse,array}
%    \end{macrocode}
%
%    \begin{macrocode}
\ProvidesExplPackage {langsci-avm} 
  {2021-12-14} {0.3.0-rc8}
  {AVMs and feature structures in LaTeX3}
  
\msg_new:nnnn {avm} {lfgoptionmissing}
  {  Missing~package~option~lfg~at~line~\msg_line_number:  }
  {
    You~issued~a~command~in~line~\msg_line_number:~that~is~only~available~when~
    the~lfg~package~option~is~enabled.
  }
  
\msg_new:nnnn {avm} {idpositionunknown}
  {  Unkown~value~for~option~`id~position`~near~line~\msg_line_number:.  }
  {  You~specified~an~unknown~value~for~option~`id~position`.~The~content~of~
     the~id~could~not~be~output.~Please~see~the~manual~for~a~list~of~valid~
     settings.
  }
%    \end{macrocode}
% Let's first check for package options.
%    \begin{macrocode}
\bool_new:N \l__avm_lfg_bool
\bool_new:N \l__avm_tikz_bool
\DeclareOption{tikz}{ \bool_set_true:N \l__avm_tikz_bool }
\DeclareOption{lfg}{ \bool_set_true:N \l__avm_lfg_bool }
\ProcessOptions\relax
%    \end{macrocode}
% Handling for the Ti\emph{k}Z package option.
%    \begin{macrocode}
\bool_if:NT \l__avm_tikz_bool 
  { 
    \RequirePackage{tikz}
    \newcounter{l__avm_picture_counter}
    \tl_new:N \l__avm_picture_name_prefix_tl
  }
%    \end{macrocode}
% Handling for the LFG package option: If the semantic bracket is not available at the end of the preamble (i.e.) it was not loaded by another package, load \pkg{unicode-math} to provide the symbol.
%    \begin{macrocode}
\bool_if:NT \l__avm_lfg_bool
  {
    \cs_if_exist:NF \lBrack
      {
        \RequirePackage{etoolbox}
        \AtEndPreamble { \RequirePackage{unicode-math} }
      }
  }
%    \end{macrocode}
%    \begin{macro}{\avm}
% This document command initialises an AVM. The first, optional argumet is a key-value list of settings (see \cs{keys_define:nn} below) and the second is the AVM itself, given in the syntax described in this documentation.
% 
% \cs{avm} enters a group so that keys- and macro-assignemts remain local. It then initialises the commands and shortcuts and any user customisation, sets its mode to |true| and assigns the keys as given in the optional argument (if any). After the wrapper \cs{avm_wrap:n} is called, the group is closed.
%
%    \begin{macrocode}
\NewDocumentCommand{\avm}{ O{} +m }
  {
    \c_group_begin_token
    \keys_set:nn { avm } { #1 }
    \__avm_initialise_document_commands:
    \__avm_initialise_custom_commands:
    \tl_use:N \l__avm_defined_commands_tl
    \bool_set_true:N \l__avm_mode_bool
    \__avm_wrap:n { #2 }
    \c_group_end_token
  }
%    \end{macrocode}
%    \end{macro}
% 
%    \begin{macro}{\avmsetup}
% Forward the key-value settings given as the optional argument to \cs{avm} to the keys defined in |\keys_define:nn { avm }|. For the meaning of these keys and initial values, see Section~\ref{sec:basiccommands}.
% 
%    \begin{macrocode}
\NewDocumentCommand{\avmsetup}{ m } 
  { \keys_set:nn { avm } { #1 } }

\keys_define:nn { avm }
  {
    align .bool_set:N      = \l__avm_align_bool,
    align .initial:n       = {true},
    stretch .tl_set:N      = \l__avm_arraystretch_tl,
    stretch .initial:n     = {0.9},
    columnsep .dim_set:N   = \l__avm_tabcolsep_dim,
    columnsep .initial:n   = {.5ex},
    vectorsep .dim_set:N   = \l__avm_singlesep_dim,
    vectorsep .initial:n   = {1em},
    delimfactor .int_set:N = \l__avm_delimfactor_int,
    delimfactor .initial:n = {1000},
    delimfall .dim_set:N   = \l__avm_delimshortfall_dim,
    delimfall .initial:n   = {0pt},
    framewidth .dim_set:N  = \l__avm_fillmore_kay_boxrule_dim,
    framewidth .initial:n  = {1pt},
    framesep .dim_set:N    = \l__avm_fillmore_kay_boxsep_dim,
    framesep .initial:n    = {3pt},
    attributes .code:n     = {\cs_set:Nn \__avm_font_attribute: {#1}},
    attributes .initial:n  = {\scshape},
    types .code:n          = {\cs_set:Nn \__avm_font_type: {#1}},
    types .initial:n       = {\itshape},
    values .code:n         = {\cs_set:Nn \__avm_font_value: {#1}},
    values .initial:n      = {\itshape},
    tags .code:n           = {\cs_set:Nn \__avm_font_tag: {#1}},
    tags .initial:n        = {\footnotesize},
    singleton .code:n      = {\cs_set:Nn \__avm_font_singleton: {#1}},
    singleton .initial:n   = {\normalfont},    
    switch .code:n         = {\tl_set:Nn \__avm_mode_switch_character {#1}},
    switch .initial:n      = { ! },
    extraskip .dim_set:N   = \l__avm_extra_skip_dim,
    extraskip .initial:n   = {\smallskipamount},
    extraskip~in~every~row .bool_set:N = \l__avm_extraskip_bool,
    customise .code:n      = {\cs_set:Nn \__avm_initialise_custom_commands: {#1}},
    customise .initial:n   = { },
    pic .bool_set:N        = \l__avm_picture_bool,
    pic .default:n         = { true },
    picname .tl_set:N      = \l__avm_picture_name_tl,
    picname .initial:n	   = {automatic},
    id~align .code:n       = { \newcolumntype{i}{#1} },
    id~align .initial:n	   = {l},
    id~position .tl_set:N  = \l__avm_id_position_tl,
    id~position .initial:n = {south-west},
    style .choice:,
    style / narrow .code:n = {\int_set:Nn \l__avm_delimfactor_int {997}
    	                      \dim_set:Nn \l__avm_delimshortfall_dim {5pt}},  
  }
%    \end{macrocode}
%    \end{macro}
  
%    \begin{macro}{\avmdefinestyle}
% Define a style to be used together with the |style| key.
%    \begin{macrocode}
\NewDocumentCommand{\avmdefinestyle}{ m m }
  {
    \keys_define:nn { avm }
      {
        style / #1 .code:n = { \keys_set:nn { avm } { #2 } }
      }
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}{\avmdefinecommand}
% A factory function that creates commands for the layout of sub-structures and saves them to \cs{l__avm_defined_commands_tl}. The first argument describes the command's name, the second any (optional) label. The manufactured definitions are activated in the AVM group so that they remain local.
%    \begin{macrocode}
\NewDocumentCommand{\avmdefinecommand}{ m O{} m }
  {
    \tl_put_right:Nn \l__avm_defined_commands_tl
      {
        \exp_args:Nc \DeclareDocumentCommand { #1 } { s } 
          { 
             #2 \IfBooleanF { ##1 } { & } \avmsetup{ #3 } 
          } 
      }
  }
%    \end{macrocode}
%    \end{macro}
  
%    \begin{variable}{\l__avm_mode_bool, \l__avm_parens_tracker, \l__avm_defined_commands_tl, \l__avm_fillmore_kay_box}
% We need an auxiliary variable to store the current mode. \cs{l__avm_parens_tracker} is a stack for a future check whether the delimiters given to \cs{avm} are balanced. \cs{l__avm_defined_commands_tl} is a token list that stores any commands provided by the user via \cs{avmdefinecommand}. The box \cs{l__avm_fillmore_kay_box} is used as a temporary storage to realise Fillmore \& Kay's notation.
%    \begin{macrocode}
\bool_new:N \l__avm_mode_bool
\seq_new:N \l__avm_parens_tracker
\tl_new:N \l__avm_defined_commands_tl
\box_new:N \l__avm_fillmore_kay_box
%    \end{macrocode}
%    \end{variable}

%    \begin{macro}[int]{\seq_set_split:NVn, \tl_if_eq:VnTF}
% In preparation for \cs{avm_wrap:n}, we need to split the user input at each occurrence of the escape character. Since the character is given in a variable, we need a variant of the sequence splitter that takes the \emph{evaluation} of the variable, rather than the variable itself, as its second argument.
% 
% The second variant is useful for comparing the values of token list variables with token lists.
%    \begin{macrocode}
\cs_generate_variant:Nn \seq_set_split:Nnn { NVn }
\cs_generate_variant:Nn \tl_if_eq:nnTF {VnTF}
%    \end{macrocode}
%    \end{macro}

%    \begin{variable}{\l__avm_in_first_column}
% A boolean to check whether we are in the first column (value |true|) or in the second (value |false|).
%    \begin{macrocode}
\bool_new:N \l__avm_in_first_column
%    \end{macrocode}
%    \end{variable}

%    \begin{macro}[int]{\__avm_init_first_column:, \__avm_init_second_column:, \__avm_init_single_column:}
% These macros apply the settings for the columns in a (sub-)structure. They take care of font selection and report the currently active column back to the system. Knowing which column is active is important when closing the (sub-)structure. If the structure is closed without a second column present, we need to skip back |2\tabcolsep|. (This does not apply to the case of vector structures, which are handled without this check.)
%    \begin{macrocode}
\cs_new:Nn \__avm_init_first_column:
  {
    \bool_set_true:N \l__avm_in_first_column
    \normalfont\__avm_font_attribute:
  }

\cs_new:Nn \__avm_init_second_column:
  {
    \bool_set_false:N \l__avm_in_first_column
    \normalfont\__avm_font_value:
  }

\cs_new:Nn \__avm_init_single_column:
  {
    \normalfont\__avm_font_attribute:
  }

%    \end{macrocode}
%    \end{macro}

%    \begin{macro}[int,added=2020-09-21]{\__avm_deinit_first_column:, \__avm_deinit_second_column:}
% These commands control settings that are applied after each column is exited. The single check here is whether italics is currently in use. If it is, the the italic correction is automatically applied. This replaces the user-configurable setting |apptovalues| from previous versions.
%    \begin{macrocode}

\tl_const:Nn \l__avm_italics_tl {it}

\cs_new:Nn \__avm_deinit_first_column:
  {
    \tl_if_eq:NNT \f@shape \l__avm_italics_tl {\/} 
  }

\cs_new:Nn \__avm_deinit_second_column:
  {
    \tl_if_eq:NNT \f@shape \l__avm_italics_tl {\/}
  }
  
\cs_new:Nn \__avm_deinit_single_column:
  {
    \tl_if_eq:NNT \f@shape \l__avm_italics_tl {\/}
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}[int]{\__avm_kern_unused_columns:}
% A helper macro to fill the horizontal space if a row is ended prematurely, i.e. if no \cmd{&} is present.
%    \begin{macrocode}
\cs_new:Nn \__avm_kern_unused_columns:
  {
    \bool_if:NTF \l__avm_in_first_column
      { \span\hspace*{-2\tabcolsep} }
      {  }
  }
%    \end{macrocode}    
%    \end{macro}

%    \begin{macro}[int]{\__avm_extra_skip:}
% This function is used together with the delimiter replacements. It checks whether the delimiter is followed by a line break, in which case an extra skip is automatically inserted
%    \begin{macrocode}
\cs_new:Nn \__avm_extra_skip:
  {
    \peek_meaning_ignore_spaces:NTF \\ {\vspace*{\l__avm_extra_skip_dim}} {}
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}[int]{\__avm_module_begin:,\__avm_module_end:,etc.}
% The replacement instructions for \cs{__avm_parse:n}. When option \meta{align = true} (default), the structure has two columns. Vector structures are inserted if \meta{align = false}.
%    \begin{macrocode}
\cs_new:Nn \__avm_module_begin: 
  {
    \bool_if:NTF \l__avm_align_bool
      {
        \begin{tabular}{@{} 
                        >{\__avm_init_first_column:}l
                        <{\__avm_deinit_first_column:}
                        >{\__avm_init_second_column:}l 
                        <{\__avm_deinit_second_column:}
                        @{}}
      }
      {
        \begin{tabular}{@{}
                       >{\__avm_init_single_column:}l
                       <{\__avm_deinit_single_column:}
                       @{}}
      }
  }
\cs_new:Nn \__avm_module_end:
  { 
    \__avm_kern_unused_columns:
    \end{tabular}
  }
  
\cs_new:Nn \__avm_replace_ampersand:
  {
    \bool_if:NTF \l__avm_align_bool
      { \__avm_parse_output:nw { & } }
      { \__avm_parse_output:nw { \__avm_deinit_first_column:
                                 \skip_horizontal:N \dim_use:N \l__avm_singlesep_dim
                                 \__avm_init_second_column: } }
  }
\cs_new:Nn \__avm_replace_lbrace: 
  { 
    \__avm_parse_output:nw 
      {  \c_math_toggle_token\left\lbrace\__avm_module_begin:  } 
  }
\cs_new:Nn \__avm_replace_rbrace: 
  { 
    \__avm_parse_output:nw 
      { \__avm_module_end:\right\rbrace\c_math_toggle_token\__avm_extra_skip: }
  }
\cs_new:Nn \__avm_replace_lbrack: 
  { 
    \__avm_parse_output:nw 
      {  \c_math_toggle_token\left\lbrack\__avm_module_begin:  } 
  }     
\cs_new:Nn \__avm_replace_rbrack: 
  { 
    \__avm_parse_output:nw 
      {  \__avm_module_end:\right\rbrack\c_math_toggle_token\__avm_extra_skip:  } 
  }
\bool_if:NTF \l__avm_lfg_bool
  {
    \cs_new:Nn \__avm_replace_llbrack: 
      { 
        \__avm_parse_output:nw 
          {  \c_math_toggle_token\left\lBrack\__avm_module_begin:  } 
      }     
    \cs_new:Nn \__avm_replace_rrbrack: 
      { 
        \__avm_parse_output:nw 
          {  \__avm_module_end:\right\rBrack\c_math_toggle_token\__avm_extra_skip:  } 
      }
  }
  {
    \cs_new:Nn \__avm_replace_llbrack: 
      { 
        \__avm_parse_output:nw 
          {  
            \msg_warning:nn {avm}{lfgoptionmissing}
            \c_math_toggle_token\left.\__avm_module_begin:  
          } 
      }     
    \cs_new:Nn \__avm_replace_rrbrack: 
      { 
        \__avm_parse_output:nw 
          {  
            \msg_warning:nn {avm}{lfgoptionmissing}
            \__avm_module_end:\right.\c_math_toggle_token\__avm_extra_skip:  
          } 
      }  
  }
\cs_new:Nn \__avm_replace_lparen:
  {    
    \__avm_parse_output:nw 
      {  \c_math_toggle_token\left(\__avm_module_begin:  }
  } 
\cs_new:Nn \__avm_replace_rparen: 
  { 
    \__avm_parse_output:nw 
      {  \__avm_module_end:\right)\c_math_toggle_token\__avm_extra_skip:  } 
  } 
\cs_new:Nn \__avm_replace_langle: 
  { 
    \__avm_parse_output:nw 
      {  \c_math_toggle_token\left<\__avm_module_begin:  } 
  } 
\cs_new:Nn \__avm_replace_rangle: 
  { 
    \__avm_parse_output:nw 
      { \__avm_module_end:\right>\c_math_toggle_token\__avm_extra_skip: } 
  }
\cs_new:Nn \__avm_replace_lframe: 
  { 
    \__avm_parse_output:nw 
      {  
        \hbox_set:Nw \l__avm_fillmore_kay_box \group_begin:
        \c_math_toggle_token\__avm_module_begin:  
      } 
  } 
\cs_new:Nn \__avm_replace_rframe: 
  { 
    \__avm_parse_output:nw 
      { 
        \__avm_module_end:\c_math_toggle_token\group_end:\hbox_set_end:
        \group_begin: 
        \dim_set_eq:NN \fboxrule \l__avm_fillmore_kay_boxrule_dim
        \dim_set_eq:NN \fboxsep \l__avm_fillmore_kay_boxsep_dim
        \fbox{\box_use:N \l__avm_fillmore_kay_box}
        \group_end: \__avm_extra_skip: 
      } 
  }
\cs_new:Nn \__avm_replace_plus:
  {
    \__avm_parse_output:nw { \leavevmode\unskip\hbox{${}\oplus{}$}\ignorespaces }
  }
\cs_new:Nn \__avm_replace_minus:
  {
    \__avm_parse_output:nw { \leavevmode\unskip\hbox{${}\ominus{}$}\ignorespaces }
  }
\cs_new:Nn \__avm_replace_circle:
  {
    \__avm_parse_output:nw { \leavevmode\unskip\hbox{${}\bigcirc{}$}\ignorespaces }
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}[updated=2020-09-21]{\tag,\type,\punk,\node,\id}
%    \begin{macrocode}
\cs_new:Npn \__avm_controls_tag:n #1 
  { \fboxsep.25ex\fboxrule.4pt\fbox{\normalfont\__avm_font_tag: #1} } 
\cs_new:Npn \__avm_controls_type:n #1 
  { \c_group_begin_token\normalfont\__avm_font_type: #1\c_group_end_token }
\cs_new_protected:Npn \__avm_controls_type_starred:n #1 
  {
    \bool_set_false:N \l__avm_in_first_column
    \normalfont\__avm_font_type: #1
    \bool_if:NTF \l__avm_align_bool
      { \__avm_deinit_second_column:\span\hspace*{-2\tabcolsep} }
      { \__avm_deinit_single_column:}
    \peek_meaning_ignore_spaces:NTF \\ {} {\\} 
  }
\cs_new_protected:Npn \__avm_controls_punk:nn #1 #2 
  {  
    \bool_set_false:N \l__avm_in_first_column
    \normalfont\c_group_begin_token\__avm_font_attribute:#1%
    \c_group_end_token\hspace{2\tabcolsep}%
    \c_group_begin_token\__avm_font_value: #2\c_group_end_token%
    \__avm_deinit_second_column:\span\hspace*{-2\tabcolsep}
    \peek_charcode_ignore_spaces:NTF \\ {} {\\}
  }

\cs_new:Nn \__avm_initialise_document_commands: 
  {
    \def\arraystretch{\tl_use:N \l__avm_arraystretch_tl}
    \dim_set_eq:NN \tabcolsep \l__avm_tabcolsep_dim
    \int_set_eq:NN \delimiterfactor \l__avm_delimfactor_int
    \dim_set_eq:NN \delimitershortfall \l__avm_delimshortfall_dim
    \cs_if_exist:NTF \tag 
      {  \RenewDocumentCommand{\tag}{m}{ \__avm_controls_tag:n {##1} } }
      {  \NewDocumentCommand{\tag}{m}{   \__avm_controls_tag:n {##1} } }
    \cs_if_exist:NTF \0
      {  \RenewDocumentCommand{\0}{}{    \__avm_controls_tag:n {0} } }
      {  \NewDocumentCommand{\0}{}{      \__avm_controls_tag:n {0} } }
    \cs_if_exist:NTF \1   
      {  \RenewDocumentCommand{\1}{}{    \__avm_controls_tag:n {1} } }
      {  \NewDocumentCommand{\1}{}{      \__avm_controls_tag:n {1} } }
    \cs_if_exist:NTF \2
      {  \RenewDocumentCommand{\2}{}{    \__avm_controls_tag:n {2} } }
      {  \NewDocumentCommand{\2}{}{      \__avm_controls_tag:n {2} } }
    \cs_if_exist:NTF \3
      {  \RenewDocumentCommand{\3}{}{    \__avm_controls_tag:n {3} } }
      {  \NewDocumentCommand{\3}{}{      \__avm_controls_tag:n {3} } }
    \cs_if_exist:NTF \4
      {  \RenewDocumentCommand{\4}{}{    \__avm_controls_tag:n {4} } }
      {  \NewDocumentCommand{\4}{}{      \__avm_controls_tag:n {4} } }
    \cs_if_exist:NTF \5
      {  \RenewDocumentCommand{\5}{}{    \__avm_controls_tag:n {5} } }
      {  \NewDocumentCommand{\5}{}{      \__avm_controls_tag:n {5} } }
    \cs_if_exist:NTF \6
      {  \RenewDocumentCommand{\6}{}{    \__avm_controls_tag:n {6} } }
      {  \NewDocumentCommand{\6}{}{      \__avm_controls_tag:n {6} } }
    \cs_if_exist:NTF \7
      {  \RenewDocumentCommand{\7}{}{    \__avm_controls_tag:n {7} } }
      {  \NewDocumentCommand{\7}{}{      \__avm_controls_tag:n {7} } }
    \cs_if_exist:NTF \8
      {  \RenewDocumentCommand{\8}{}{    \__avm_controls_tag:n {8} } }
      {  \NewDocumentCommand{\8}{}{      \__avm_controls_tag:n {8} } }
    \cs_if_exist:NTF \9
      {  \RenewDocumentCommand{\9}{}{    \__avm_controls_tag:n {9} } }
      {  \NewDocumentCommand{\9}{}{      \__avm_controls_tag:n {9} } }
    \cs_if_exist:NTF \type 
      {  \RenewDocumentCommand{\type}{s m}
        {  
          \IfBooleanTF { ##1 } 
            {  \__avm_controls_type_starred:n {##2}  }
            {  \__avm_controls_type:n {##2} }
         } 
       }
       {  \NewDocumentCommand{\type}{s m}
         {
           \IfBooleanTF { ##1 }
             {  \__avm_controls_type_starred:n {##2}  }
             {  \__avm_controls_type:n {##2}  }
          } 
        }
    \cs_if_exist:NTF \punk 
      {  \RenewDocumentCommand{\punk}{m m}
        { \__avm_controls_punk:nn {##1}{##2} } }
      {  \NewDocumentCommand{\punk}{m m}
        {  \__avm_controls_punk:nn {##1}{##2} } }
    \DeclareDocumentCommand{\id}{m m}
      {%
        \hcoffin_set:Nw \l_tmpa_coffin
          \bgroup
          \def\arraystretch{.5}
          \begin{tabular}[b]{@{}>{$\scriptstyle}i<{$}@{}}
          ##1
          \end{tabular}
          \egroup
          \hcoffin_set_end:
          \hcoffin_set:Nw \l_tmpb_coffin ##2 \hcoffin_set_end:
          \tl_if_eq:VnTF \l__avm_id_position_tl {south-west}
            {%
              \coffin_join:NnnNnnnn \l_tmpb_coffin {l}{H}
              \l_tmpa_coffin {r}{H}{ 0pt }{ -\coffin_dp:N \l_tmpb_coffin } %-\coffin_wd:N \l_tmpa_coffin
            }
            {%
              \tl_if_eq:VnTF \l__avm_id_position_tl {south-east}
              {%
                \coffin_join:NnnNnnnn \l_tmpb_coffin {l}{H}
                \l_tmpa_coffin {l}{H}{ \coffin_wd:N \l_tmpb_coffin }{ -\coffin_dp:N \l_tmpb_coffin }
              }
              {
                \msg_error:nn {avm}{idpositionunknown}
              } 
            }  
        \coffin_typeset:Nnnnn \l_tmpb_coffin {l}{vc}{0pt}{0pt}
      }
%    \end{macrocode}
% The last of the bunch is only loaded if Ti\emph{k}Z is loaded as well:
%    \begin{macrocode}
    \bool_if:NT \l__avm_tikz_bool 
      {
        \tl_if_eq:VnTF \l__avm_picture_name_tl {automatic}
          {
            \stepcounter{l__avm_picture_counter}  
            \tl_set:Nn \l__avm_picture_name_prefix_tl 
              {avm-\tl_use:N \thel__avm_picture_counter} 
          }
          {
            \tl_set_eq:NN \l__avm_picture_name_prefix_tl \l__avm_picture_name_tl           
          }
        \DeclareDocumentCommand{\node}{m m}
          { 
            \tikz [remember~picture,baseline=(\l__avm_picture_name_prefix_tl-##1.base)] 
            \node [inner~sep=0pt] (\l__avm_picture_name_prefix_tl-##1) {\strut ##2}; 
          }
      }
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}{\__avm_wrap:n}
% The wrapper that first splits the input to \cs{avm} at each occurrence of \cs{__avm_mode_switch_character} and then inverses \cs{l__avm_mode_bool}. It then calls the parser (\cs{__avm_parse:n}) for each splitted sequence. This wrapping is necessary because there is no known expandable way to switch a boolean.
%    \begin{macrocode}
\cs_new_protected:Npn \__avm_wrap:n #1
  {
    \seq_set_split:NVn \l__avm_wrapper_seq 
    \__avm_mode_switch_character { #1 }
    \seq_map_inline:Nn \l__avm_wrapper_seq 
      {  
        \exp_args:No \exp_not:o 
          {  \__avm_parse:n {##1} }  
        \bool_set_inverse:N \l__avm_mode_bool 
      }
  }
%    \end{macrocode}
%    \end{macro}

%    \begin{macro}{\__avm_parse:n}
% Finally, the parser. It is build on \cs{@@@@_act:NNNnn} from \cmd{l3tl} (see the sub-section \emph{Token by token changes}). Many thanks to Phelype Oleinik for help on this, and in particular on help with expansion. 
%    \begin{macrocode}
\cs_new:Npn \__avm_parse:n #1
  {
      \exp:w
      \group_align_safe_begin:
        \__avm_parse_loop:w #1 
        \q_recursion_tail \q_recursion_stop 
        \__avm_result:n { }
  }

\cs_new:Npn \__avm_end:w \__avm_result:n #1
  {
    \group_align_safe_end:
    \exp_end:
    #1
  }

\cs_new:Npn \__avm_parse_loop:w #1 \q_recursion_stop
  {
    \tl_if_head_is_N_type:nTF {#1}
      {
        \__avm_N_type:N #1 \q_recursion_stop 
      }
      {
        \tl_if_head_is_group:nTF {#1}
          { \__avm_replace_group:nw #1 \q_recursion_stop }
          { \__avm_replace_space:w #1 \q_recursion_stop }
      }
  }
  
\cs_new:Npn \__avm_N_type:N #1
  {
    \quark_if_recursion_tail_stop_do:Nn #1 { \__avm_end:w }
    \bool_if:NTF \l__avm_mode_bool 
      { \__avm_replace:N #1 } 
      { \__avm_replace_none:N #1 } 
  }
  
\cs_new:Npn \__avm_replace_none:N #1 
  { 
    \__avm_parse_output:nw {#1}
  }

\cs_new:Npn \__avm_replace:N #1
  {
    \str_case:nnF {#1}
      {
        { \+ }{ \__avm_replace_plus: }
        { \- }{ \__avm_replace_minus: }
        { \shuffle }{ \__avm_replace_circle: }
        { &  }{ \__avm_replace_ampersand: }
        { [  }{ \__avm_replace_lbrack: }
        { ]  }{ \__avm_replace_rbrack: }
        { \[ }{ \__avm_replace_llbrack: }
        { \] }{ \__avm_replace_rrbrack: }
        { (  }{ \__avm_replace_lparen: }
        { )  }{ \__avm_replace_rparen: }
        { \{ }{ \__avm_replace_lbrace: }        
        { \} }{ \__avm_replace_rbrace: }                
        { <  }{ \__avm_replace_langle: } 
        { >  }{ \__avm_replace_rangle: } 
        { \lframe }{ \__avm_replace_lframe: }
        { \rframe }{ \__avm_replace_rframe: }
      }
      { \__avm_replace_none:N #1 }
  }

\cs_new:Npn \__avm_replace_group:nw #1
  { \exp_args:NNo \exp_args:No \__avm_replace_group:n { \__avm_parse:n {#1} } }

\cs_new:Npn \__avm_replace_group:n #1 { \__avm_parse_output:nw { {#1} } }

\exp_last_unbraced:NNo
\cs_new:Npn \__avm_replace_space:w \c_space_tl { \__avm_parse_output:nw { ~ } }

\cs_new:Npn \__avm_parse_output:nw #1 #2 \q_recursion_stop \__avm_result:n #3
  { \__avm_parse_loop:w #2 \q_recursion_stop \__avm_result:n {#3  #1 } }
%    \end{macrocode}
%    \end{macro}
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}

% \PrintIndex
